<launch>
    <!-- Arguments -->
    <!-- General arguments -->
    <arg name="debug_mode"
         default="false"
         doc="Run the mapper in debug mode."/>
    <arg name="show_rviz"
         default="true"
         doc="Automatically launch Rviz."/>
    <arg name="rosbag_dir" default="/tmp"/>
    <!-- Stop the simulation after timeout minutes if rviz is false. -->
    <arg name="timeout" default="15"/>

   <!-- The name of the world to use for simulation. -->
   <arg name="world" default="depot"/>
   <arg name="gui" default="false"/>
   <arg name="mav_name" default="rmf_owl"/>

    <!-- Planner arguments -->
    <arg name="planner_config" default="experiments/glocal_tum.yaml"/>

    <!-- Airsim arguments >
    <arg name="airsim_config" default="experiments/general/airsim.yaml"/>
    <arg name="drift_config" default="experiments/general/drift/drift_moderate.yaml"/>
    <arg name="use_airsim_time" default="true"/>
    <arg name="mav_name" default="airsim_drone"/-->

    <!-- TUM Simulator -->
    <include file="$(find srl_sim_gazebo_ignition)/launch/sim.launch">
      <arg name="airframe"   value="rmf_owl"/>
      <arg name="world"      value="$(find srl_sim_gazebo_ignition)/resources/worlds/$(arg world).world"/>
      <arg name="gui"        value="$(arg gui)"/>
    </include>
    <node pkg="tf2_ros" type="static_transform_publisher" name="world_tf" args="0 0 0 0 0 0 1 $(arg world) world"/>

    <!-- Linear MPC using trajectory anchoring interface -->
    <!-- Take-off automatically -->
    <!--<include file="$(find srl_sim_util)/launch/px4_arm_offboard.launch"/>-->

    <param name="config_file_autopilot" value="$(find srl_sim_gazebo_ignition)/config/rmf_owl_mpc.yaml"/>
    <node pkg="mpc_ros" type= "odom2odomAndTrajectory.py" name="odom2odomAndTrajectory" required="true" output="screen"/>
    <node pkg="mpc_ros" type= "mpc_node" name="mpc_node" required="true" output="screen">
      <!--<remap from="/mavros/odometry/data" to="/$(arg mav_name)/odom_and_trajectory"/>-->
      <remap from="/mavros/odometry/data" to="/okvis_node/odom_and_trajectory_aligned"/>
      <remap from="/autopilot/trajectory" to="/$(arg mav_name)/command/pose"/>
    </node>

    <!-- Run also OKVIS (without submapping + alignment as this should be handled by Voxgraph) in the loop -->
    <node pkg="srl_navigation" type="okvis_navigation_subscriber_w_stereo_depth" name="okvis_node" required="true" output="screen">
      <env name="OMP_NUM_THREADS" value="3"/>
       <param name="autonomous_flight" value="true"/>
       <param name="mesh_cutoff_z" type="double" value="8.0"/>
       <param name="frontier_cutoff_z" type="double" value="8.0"/>
       <param name="submap_path" value="/tmp"/>
       <param name="trajectory_velocity" type="double" value="3.0"/>
       <param name="maximum_yaw_rate" type="double" value="0.5"/>
       <param name="planning_time" type="double" value="1.0"/>
       <param name="csv_path" type="string" value="/tmp/"/>
       <param name="save_submap_meshes" type="bool" value="false"/>
       <param name="config_filename" value="$(find srl_sim_gazebo_ignition)/config/rmf_owl_okvis_eth.yaml"/>
       <param name="submapping_config_filename" value="$(find srl_sim_gazebo_ignition)/config/rmf_owl_mapping_nn.yaml"/>
      <remap from="/cam0/image_raw"            to="/rmf_owl/cam0/image_raw"/>
      <remap from="/cam1/image_raw"            to="/rmf_owl/cam1/image_raw"/>
      <remap from="/imu0"                      to="/rmf_owl/okvis_imu0"/>
    </node>
    <node pkg="srl_navigation" type= "okvis_world_align.py" name="okvis_world_align" required="true" output="screen"/>

    <!-- Start Exploration Node-->
    <!--<node pkg="srl_navigation" type="start_exploration_node.py" name="start_exploration_node" output="screen">
      <param name="method" value="glocal"/>
    </node>-->

    <!-- Experiment arguments -->
    <arg name="record_data" default="false"/>
    <arg name="record_visualization" default="false"/>
    <arg name="data_path" default="/storage/local/boche/glocal/"/>
    <arg name="time_limit" default="30"/> <!-- min -->
    <arg name="data_interval" default="30"/>  <!-- sec -->
    <arg name="planner_node_name"
         default="/glocal_system"/> <!-- Name of GLocal's ROS node -->
    <arg name="place_recognition_simulator_config" default=""
         doc="Path to place recognition simulator config. Leave blank to disable."/>

    <!-- Automatically generated arguments -->
    <arg unless="$(arg debug_mode)" name="launch_prefix" value=""/>
    <arg if="$(arg debug_mode)" name="launch_prefix"
         value="gdb -ex run --args"/>

    <!-- Launch -->
    <!-- Setup the experiment -->
    <param name="/use_sim_time" value="true"/>

    <!-- tf -->
    <node pkg="tf" type="static_transform_publisher"
          name="static_tf_depot_odom"
          args="0 0 0 0 0 0 1 /odom /forest2 100"/>

    <node pkg="tf" type="static_transform_publisher"
              name="static_tf_odom_map"
              args="0 0 0 0 0 0 1 /odom /map 100"/>
    <!--
    <node pkg="tf" type="static_transform_publisher"
          name="static_tf_mission_world"
          args="0 0 0 0 0 0 1 /mission /world 100"/>
    -->

    <!-- airsim client >
    <node name="airsim_simulator" pkg="unreal_airsim"
          type="airsim_simulator_node" required="true" output="screen"
          args="-alsologtostderr">
        <rosparam
                file="$(find glocal_exploration_ros)/config/$(arg airsim_config)"/>
        <rosparam
                file="$(find glocal_exploration_ros)/config/$(arg drift_config)"/>
    </node-->

    <!-- Place recognition simulator (for voxgraph external loop closures) -->

    <!-- Planner -->
    <group ns="glocal">
        <node name="glocal_system" pkg="glocal_exploration_ros"
              type="glocal_system_node"
              output="screen" launch-prefix="$(arg launch_prefix)" required="false">
            <rosparam command="load"
                      file="$(find glocal_exploration_ros)/config/$(arg planner_config)"/>
            <remap from="~pointcloud" to="/my_pcl_topic"/>
            <!--remap from="odometry" to="/$(arg mav_name)/odom"/-->
            <remap from="odometry" to="/okvis_node/okvis_odometry_aligned"/>
            <remap from="command/pose" to="/$(arg mav_name)/command/pose"/>
            <remap from="~/global_planner/submap_in"
                   to="~/mapping/submap_esdfs"/>
            <remap from="~/global_planner/submap_pose_in"
                   to="~/mapping/submap_poses"/>
            <remap from="~/loop_closure_input" to="/disable/okvis_node/okvis_loop_closures"/>
        </node>
    </group>

  <node pkg="srl_navigation" type="simulator_commands.py" name="sim_autopilot" output="screen" required="false">
    <param name="heightmap_path"   type="string" value="$(find srl_sim_gazebo_ignition)/resources/models/forest/materials/textures/heightmap.png"/>
    <param name="plan_time" type="double" value="$(arg plan_time)"/>
  </node>
<!--
    <arg name="target_directory" default="/storage/local/boche/glocal/"/>
    <arg name="evaluate" default="true"/>
    <arg name="evaluation_config" default="experiments/maze/evaluation.yaml"/>
    <arg name="method" default="recent"/>
    <arg name="series" default="false"/>
    <arg name="create_plots" default="true"/>
    <arg name="clear_voxblox_maps"
         default="false"/>    <!- automatic irreversible(!) map removal to free disk space -->

    <!-- Experiment startup and Evaluation ->
    <group ns="evaluation">
            <!- Manager ->
        <node name="experiment_manager" pkg="glocal_exploration_ros"
                  type="experiment_manager.py" output="screen" required="true">
            <remap from="collision" to="/$(arg mav_name)/collision"/>
            <param name="ns_planner"
                   value="/glocal/glocal_system/toggle_running"/>
            <param name="ns_voxblox" value="voxblox_gt"/>
            <param name="evaluate" value="$(arg evaluate)"/>
            <param name="eval_directory" value="$(arg data_path)"/>
            <param name="time_limit" value="$(arg time_limit)"/>
            <param name="eval_frequency" value="$(arg data_interval)"/>
            <param name="planner_node_name" value="$(arg planner_node_name)"/>
            <param name="startup_timeout" value="30.0"/>
        </node>
    </group-->

  <!--<node pkg="rosbag"
        type="record"
        name="rosbag_record"
        args="record -O $(arg rosbag_dir)/iros2024_glocal_exploration /rmf_owl/odom /rmf_owl/lidar/points /okvis_node/okvis_odometry /okvis_node/okvis_odometry_aligned"
        required="true"/>-->

    <!-- Visualization -->
    <group if="$(arg show_rviz)">
        <arg name="rviz_file"
             default="$(find glocal_exploration_ros)/config/visualization/glocal.rviz"/>
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(arg rviz_file)"/>
    </group>

    <!-- Start the simulation run manager only if rviz isn't running. -->
    <node pkg="srl_navigation"
          type="run_manager_node.py"
          name="run_manager"
          output="screen"
          required="true"
          unless="$(arg show_rviz)">
      <param name="timeout" value="$(arg timeout)"/>
      <param name="method" value="glocal"/>
      <param name="output_dir" value="$(arg rosbag_dir)"/>
    </node>
</launch>
